/* 
	ASAS : AwesomeSauss GridSASS
	by Darin Cassler
	
	A total flexible grid system which seemlessly adapts to any screensize by avoiding the notion 
	of any sort of fixed width. 
	
*/


// Configuration
	$font-size	: 15; // Your base font-size in pixels
	$em			: $font-size; // Shorthand for outputting ems
	$line		: $em*1.6; // shorthand for lineheight
	$column		: 48; // The column-width of your grid in pixels
	$gutter		: 24; // The gutter-width of your grid in pixels

// Column-widths in variables, in ems
// You can always use these in a pinch
	 $cols1: #{( 1 * ($column + $gutter) - $gutter) / $em}em;
	 $cols2: #{( 2 * ($column + $gutter) - $gutter) / $em}em;
	 $cols3: #{( 3 * ($column + $gutter) - $gutter) / $em}em;
	 $cols4: #{( 4 * ($column + $gutter) - $gutter) / $em}em;
	 $cols5: #{( 5 * ($column + $gutter) - $gutter) / $em}em;
	 $cols6: #{( 6 * ($column + $gutter) - $gutter) / $em}em;
	 $cols7: #{( 7 * ($column + $gutter) - $gutter) / $em}em;
	 $cols8: #{( 8 * ($column + $gutter) - $gutter) / $em}em;
	 $cols9: #{( 9 * ($column + $gutter) - $gutter) / $em}em;
	$cols10: #{(10 * ($column + $gutter) - $gutter) / $em}em;
	$cols11: #{(11 * ($column + $gutter) - $gutter) / $em}em;
	$cols12: #{(12 * ($column + $gutter) - $gutter) / $em}em;
	$cols13: #{(13 * ($column + $gutter) - $gutter) / $em}em;
	$cols14: #{(14 * ($column + $gutter) - $gutter) / $em}em;
	$cols15: #{(15 * ($column + $gutter) - $gutter) / $em}em;
	$cols16: #{(16 * ($column + $gutter) - $gutter) / $em}em;

// Column-widths in a function, in ems

@mixin width($cols:1) { // creates a box x columns wide with no gutter, general purpose interior box
	width: #{($cols * ($column + $gutter) - $gutter) / $em}em;
	display:inline-block;
}
@mixin pad($cols:1) { // creates a box x columns wide, padding inside to avoid breaking. useful for inlays and call to actions
	width: #{($cols * ($column + $gutter) - $gutter) / $em}em;
	padding:#{(0.5* $gutter) / $em}em;
	display:inline-block;
}
@mixin margin($cols:1) { // creates a box with proper gutters on either side, general purpose content box
	width: #{($cols * ($column + $gutter) - $gutter) / $em}em;
	margin:0 #{(0.5* $gutter) / $em}em;
	display:inline-block;
}
@mixin contain($cols:1) { // creates a box with extra room to contain gutter grids, general purpose wrapper
	width: #{($cols * ($column + $gutter) + $gutter) / $em}em;
	display:inline-block;
}